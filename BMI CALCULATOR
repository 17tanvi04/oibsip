import tkinter as tk
from tkinter import messagebox, ttk
import sqlite3
import matplotlib.pyplot as plt
from datetime import datetime

# Database setup
conn = sqlite3.connect('bmi_data.db')
c = conn.cursor()
c.execute('''
          CREATE TABLE IF NOT EXISTS bmi_data
          (id INTEGER PRIMARY KEY, name TEXT, weight REAL, height REAL, bmi REAL, date TEXT)
          ''')
conn.commit()

# Functions
def calculate_bmi(weight, height):
    return weight / (height ** 2)

def save_data(name, weight, height, bmi):
    date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    c.execute('''
              INSERT INTO bmi_data (name, weight, height, bmi, date)
              VALUES (?, ?, ?, ?, ?)''', (name, weight, height, bmi, date))
    conn.commit()

def view_data():
    c.execute('SELECT * FROM bmi_data')
    data = c.fetchall()
    for row in data:
        tree.insert("", "end", values=row)

def plot_trends():
    c.execute('SELECT date, bmi FROM bmi_data WHERE name=?', (entry_name.get(),))
    data = c.fetchall()
    if data:
        dates = [datetime.strptime(row[0], "%Y-%m-%d %H:%M:%S") for row in data]
        bmis = [row[1] for row in data]
        plt.plot(dates, bmis, marker='o')
        plt.xlabel('Date')
        plt.ylabel('BMI')
        plt.title(f'BMI Trend for {entry_name.get()}')
        plt.grid(True)
        plt.show()
    else:
        messagebox.showinfo("No Data", "No historical data found for this user.")

def on_calculate():
    try:
        weight = float(entry_weight.get())
        height = float(entry_height.get())
        name = entry_name.get()
        if name == "":
            messagebox.showwarning("Input Error", "Please enter your name.")
            return
        bmi = calculate_bmi(weight, height)
        label_result.config(text=f"Your BMI is {bmi:.2f}")
        save_data(name, weight, height, bmi)
        tree.delete(*tree.get_children())
        view_data()
    except ValueError:
        messagebox.showwarning("Input Error", "Please enter valid numerical values for weight and height.")

# GUI setup
root = tk.Tk()
root.title("BMI Calculator")

frame = tk.Frame(root)
frame.pack(pady=10)

label_name = tk.Label(frame, text="Name:")
label_name.grid(row=0, column=0, padx=5, pady=5)
entry_name = tk.Entry(frame)
entry_name.grid(row=0, column=1, padx=5, pady=5)

label_weight = tk.Label(frame, text="Weight (kg):")
label_weight.grid(row=1, column=0, padx=5, pady=5)
entry_weight = tk.Entry(frame)
entry_weight.grid(row=1, column=1, padx=5, pady=5)

label_height = tk.Label(frame, text="Height (m):")
label_height.grid(row=2, column=0, padx=5, pady=5)
entry_height = tk.Entry(frame)
entry_height.grid(row=2, column=1, padx=5, pady=5)

button_calculate = tk.Button(frame, text="Calculate BMI", command=on_calculate)
button_calculate.grid(row=3, columnspan=2, pady=10)

label_result = tk.Label(frame, text="")
label_result.grid(row=4, columnspan=2, pady=5)

button_trends = tk.Button(frame, text="View BMI Trends", command=plot_trends)
button_trends.grid(row=5, columnspan=2, pady=5)

# Treeview for data display
tree = ttk.Treeview(root, columns=("ID", "Name", "Weight", "Height", "BMI", "Date"), show="headings")
tree.heading("ID", text="ID")
tree.heading("Name", text="Name")
tree.heading("Weight", text="Weight")
tree.heading("Height", text="Height")
tree.heading("BMI", text="BMI")
tree.heading("Date", text="Date")
tree.pack(pady=10)

view_data()

root.mainloop()

# Close the database connection when the GUI is closed
conn.close()
